const { uid } = require('uid');

/*
 * This is an Upload that exists in Firestore. It is used to store metadata about an upload
 * Uploads are indexed by their id. An upload is stored in Firestore at:
 * /users/{user_id}/uploads/{upload.id}
 */
class Upload {
  constructor(name) {
    // We generate a unique id for the upload
    this.id = uid();
    // The name of the upload
    this.name = name;
    // The raw size of the upload in bytes. When initialized, this is set to 0
    this.size = 0;
    // The status of the upload. When initialized, this is set to 0
    this.status = 0;
    // The root directory of the upload. This is retrieved from the manifest file generated by the `dataprep` tool
    this.root = '';
    // The name of the manifest file where it is stored i cloud storage
    this.manifest = '';
  }

  // Set the id of the upload. Use when making an upload representation from a Firestore document
  with_id = (id) => {
    this.id = id;
    return this;
  };

  // Set the size of the upload. Use when making an upload representation from a Firestore document
  with_size = (size) => {
    this.size = size;
    return this;
  };

  // Set the status of the upload. Use when making an upload representation from a Firestore document
  with_status = (status) => {
    this.status = status;
    return this;
  };

  // Set the root directory of the upload. Use when making an upload representation from a Firestore document
  with_root = (root) => {
    this.root = root;
    return this;
  };

  // Set the manifest file name of the upload. Use when making an upload representation from a Firestore document
  with_manifest = (manifest) => {
    this.manifest = manifest;
    return this;
  };

  // Convert the upload to an interface that can be used to store in Firestore
  to_interface = () => {
    return {
      name: this.name,
      size: this.size,
      status: this.status,
      root: this.root,
      manifest: this.manifest,
    };
  };
}

// This is the converter that allows us to convert between the Firestore
const uploadConverter = {
  toFirestore: (upload) => {
    return upload.to_interface();
  },
  fromFirestore: (snapshot, options) => {
    const data = snapshot.data(options);
    return new Upload(data.name)
      .with_id(snapshot.id)
      .with_size(data.size)
      .with_status(data.status)
      .with_root(data.root)
      .with_manifest(data.manifest);
  },
};

module.exports = { Upload, uploadConverter };
